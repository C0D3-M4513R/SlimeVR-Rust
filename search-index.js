var searchIndex = JSON.parse('{\
"autoupdater":{"doc":"","t":[3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,0,12,11,11,14,11,11,11,11,11,11,12,12,13,13,13,3,4,3,13,13,13,13,13,13,13,13,13,2,13,13,13,2,2,13,13,13,4,13,13,13,13,13,13,13,13,4,4,4,13,13,13,13,4,4,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,0,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,4,13,13,13,3,3,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,13,6,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12],"n":["Args","VERSIONING_URL","__private_field","augment_args","augment_args_for_update","borrow","borrow","borrow_mut","borrow_mut","deref","from","from","from_arg_matches","from_arg_matches_mut","into","into","into_app","into_app_for_update","main","parsing","path","try_from","try_from","try_get","try_into","try_into","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut","url","0","AutoUpdater","AutoUpdater","AutoUpdater","ComponentInfo","ComponentName","Components","Driver","Driver","Driver","Feeder","Feeder","Feeder","Gui","Gui","Gui","InstallPath","Linux64","Linux64","Linux64","MCP","MaybeCrossPlatform","Overlay","Overlay","Overlay","Platform","Server","Server","Server","Unknown","Unknown","Windows64","Windows64","Windows64","__ComponentNameDe","__ComponentNameDeUntagged","__ComponentNameSer","__Enum","__Enum","__Other","__Other","__PlatformDe","__PlatformDeUntagged","__PlatformSer","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","current","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","download_url","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_str","from_str","hash","hash","header","header","install_dir","install_path","into","into","into","into","into","into","into","into","into","into","mcp","ne","ne","ne","ne","serialize","serialize","serialize","serialize","serialize","serialize","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","0","0","0","0","0","0","InstallPath","Normal","RelativeToSlime","RelativeToSteam","SLIME_DIR","STEAM_DIR","__private_field","__private_field","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","deref","deref","deserialize","eq","equivalent","fmt","from","from","from","hash","into","into","into","ne","serialize","to_path","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","0","0","0","Cross","MCP","MaybeCrossPlatform","NotCross","borrow","borrow_mut","deserialize","eq","equivalent","fmt","from","from","from","from","get","get_mut","get_owned","into","ne","serialize","try_from","try_into","type_id","0","0"],"q":["autoupdater","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","autoupdater::parsing","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","autoupdater::parsing::ComponentName","autoupdater::parsing::Platform","autoupdater::parsing::__ComponentNameDeUntagged","","autoupdater::parsing::__PlatformDeUntagged","","autoupdater::parsing::install_path","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","autoupdater::parsing::install_path::InstallPath","","","autoupdater::parsing::mcp","","","","","","","","","","","","","","","","","","","","","","","autoupdater::parsing::mcp::MaybeCrossPlatform",""],"d":["","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Describes the format of the versioning file","The path to a versioning.yaml file, to use instead of the …","","","Helper macro to unpack Option and continue with a helpful …","","","","","","","The url to fetch the versioning.yaml from.","","","","","Describes all the information about a component and how to …","","","","","","","","","","","","","","","","","","","","","Represents a target platform for SlimeVR","","","","A platform we don’t understand.","The name of a component we don’t understand.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The URL from which this component is downloaded.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","The dir to which this component is installed.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The location to install a component.","Just a regular path","A path relative to the SlimeVR installation dir","A path relative to the SteamVR installation dir","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Converts to the full absolute path of the file","","","","","","","","","","","","","This <code>T</code> is the same across all platforms.","Type alias so we don’t have long ass names","This enum allows us to represent a <code>T</code> that may or may not …","This <code>T</code> depends on the <code>Platform</code>","","","","","","","","","Returns the argument unchanged.","","Gets the <code>T</code> for the current platform.","","","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,1,2,2,1,2,1,2,1,1,2,2,2,1,2,2,2,0,0,2,1,2,0,1,2,1,2,2,2,2,3,4,5,6,0,0,0,4,5,6,4,5,6,4,5,6,0,7,8,9,0,0,4,5,6,0,4,5,6,9,6,7,8,9,0,0,0,10,11,10,11,0,0,0,7,10,8,9,12,4,11,5,6,3,7,10,8,9,12,4,11,5,6,3,9,9,9,7,10,9,12,4,11,6,3,12,9,12,6,3,9,12,6,3,9,9,12,6,6,3,7,10,8,9,12,4,11,5,6,3,9,6,9,6,9,6,12,0,7,10,8,9,12,4,11,5,6,3,0,9,12,6,3,8,9,12,5,6,3,9,9,6,7,10,8,9,9,9,12,4,11,5,6,6,6,3,7,10,8,9,12,4,11,5,6,3,7,10,8,9,12,4,11,5,6,3,13,14,15,16,17,18,0,19,19,19,0,0,20,21,20,21,19,20,21,19,20,21,19,19,19,19,20,21,19,19,20,21,19,19,19,19,20,21,19,20,21,19,20,21,19,22,23,24,25,0,0,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,27],"f":[null,null,null,[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["url",3]],[[]],[[]],[[["argmatches",3]],["result",4,[["error",3]]]],[[["argmatches",3]],["result",4,[["error",3]]]],[[]],[[]],[[],["command",6]],[[],["command",6]],[[],["result",6]],null,null,[[],["result",4]],[[],["result",4]],null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["platform",4]],[[["",0],["",0]]],[[],["platform",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[["",0],["platform",4]],["bool",0]],[[["",0],["componentinfo",3]],["bool",0]],[[["",0],["componentname",4]],["bool",0]],[[["",0],["components",3]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["indentedsection",3]],[[],["indentedsection",3]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["",0],["platform",4]],["bool",0]],[[["",0],["componentinfo",3]],["bool",0]],[[["",0],["componentname",4]],["bool",0]],[[["",0],["components",3]],["bool",0]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["string",3]],["result",4]],[[["str",0]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["string",3]],["result",4]],[[["str",0]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["maybecrossplatform",4]],[[["",0]],["maybecrossplatform",4]],[[],["result",4]],[[["",0],["installpath",4]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["",0],["",0]]],[[]],[[]],[[]],[[["",0],["installpath",4]],["bool",0]],[[["",0]],["result",4]],[[["",0]],["result",6,[["pathbuf",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[],["result",4]],[[["",0],["maybecrossplatform",4]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[],["maybecrossplatform",4]],[[["never",0]]],[[]],[[["hashmap",3,[["platform",4]]]],["maybecrossplatform",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[],["option",4]],[[]],[[["",0],["maybecrossplatform",4]],["bool",0]],[[["",0]],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null],"p":[[3,"VERSIONING_URL"],[3,"Args"],[3,"Components"],[4,"__ComponentNameDe"],[4,"__ComponentNameSer"],[4,"ComponentName"],[4,"__PlatformDe"],[4,"__PlatformSer"],[4,"Platform"],[4,"__PlatformDeUntagged"],[4,"__ComponentNameDeUntagged"],[3,"ComponentInfo"],[13,"Unknown"],[13,"Unknown"],[13,"__Enum"],[13,"__Other"],[13,"__Enum"],[13,"__Other"],[4,"InstallPath"],[3,"SLIME_DIR"],[3,"STEAM_DIR"],[13,"Normal"],[13,"RelativeToSlime"],[13,"RelativeToSteam"],[4,"MaybeCrossPlatform"],[13,"Cross"],[13,"NotCross"]]},\
"skeletal_model":{"doc":"An experimental skeletal model for full body tracking …","t":[2,0,0,0,0,0,12,13,13,4,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,4,13,13,13,13,13,13,18,18,18,13,18,13,13,13,13,13,13,13,17,17,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,6,6,6,6,11,11,11,5,11,5,5,5,5,12,12,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,8,13,13,4,2,13,13,13,13,13,13,13,6,13,13,6,6,13,13,13,13,13,3,3,12,12,11,11,11,11,0,11,11,11,11,12,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,13,3,4,13,13,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,3,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11],"n":["Skeleton","bone","conventions","newtypes","prelude","skeleton","0","AnkleL","AnkleR","BoneKind","BoneMap","Chest","FootL","FootR","ForearmL","ForearmR","Hip","Neck","ThighL","ThighR","UpperArmL","UpperArmR","Waist","WristL","WristR","bone_kind","bone_map","borrow","borrow_mut","clone","clone_into","default","eq","equivalent","fmt","from","from","from_subset","index","index_mut","into","into_iter","is_in_subset","ne","to_owned","to_subset","to_subset_unchecked","try_from","try_from","try_from_iter","try_into","type_id","AnkleL","AnkleR","BoneKind","Chest","FootL","FootR","ForearmL","ForearmR","Hip","MAX","MIN","NUM_TYPES","Neck","ROOT","ThighL","ThighR","UpperArmL","UpperArmR","Waist","WristL","WristR","_IMPL_NUM_FromPrimitive_FOR_BoneKind","_IMPL_NUM_ToPrimitive_FOR_BoneKind","borrow","borrow_mut","calibration_rotation","calibration_rotation_local","children","clone","clone_into","eq","equivalent","fmt","from","from_i64","from_subset","from_u64","hash","into","is_in_subset","iter","max","min","num_types","parent","root","to_i64","to_owned","to_subset","to_subset_unchecked","to_u64","try_from","try_from","try_from","try_into","type_id","0","BoneMap","IntoIter","Iter","IterMut","MapIdxFnType","iter","iter_mut","map","map_idx","new","forward_vec","look_towards","right_vec","up_vec","0","0","Global","Local","borrow","borrow","borrow_mut","borrow_mut","default","default","eq","eq","equivalent","equivalent","fmt","fmt","from","from","from","from","from","from","from_subset","from_subset","impl_helper","into","into","is_in_subset","is_in_subset","ne","ne","private","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","type_id","Sealed","AnkleL","AnkleR","BoneKind","BoneMap","Chest","FootL","FootR","ForearmL","ForearmR","Hip","Neck","Point","ThighL","ThighR","Translation","UnitQuat","UpperArmL","UpperArmR","Waist","WristL","WristR","Skeleton","SkeletonConfig","bone_lengths","bone_map","borrow","borrow","borrow_mut","borrow_mut","edge","from","from","from_subset","from_subset","graph","index","into","into","is_in_subset","is_in_subset","new","new","node","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","type_id","Bone","Edge","EdgeKind","InputTracker","OutputTracker","borrow","borrow","borrow_mut","borrow_mut","calib_rot_l","calibration_rotation","clone","clone_into","eq","equivalent","fmt","from","from","from","from_subset","from_subset","hash","input_rot_g","input_rotation_mut","into","into","is_in_subset","is_in_subset","kind","kind","length","length","length_mut","ne","new","output_rot_g","output_rotation","to_owned","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","type_id","0","Node","borrow","borrow_mut","default","fmt","from","from_subset","input_pos_g","input_position","input_position_mut","into","is_in_subset","new","output_pos_g","output_position","output_position_mut","to_subset","to_subset_unchecked","try_from","try_into","type_id"],"q":["skeletal_model","","","","","","skeletal_model::bone","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skeletal_model::bone::bone_kind","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skeletal_model::bone::bone_map","","","","","","","","","","","skeletal_model::conventions","","","","skeletal_model::newtypes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skeletal_model::newtypes::private","skeletal_model::prelude","","","","","","","","","","","","","","","","","","","","","skeletal_model::skeleton","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skeletal_model::skeleton::edge","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skeletal_model::skeleton::edge::EdgeKind","skeletal_model::skeleton::node","","","","","","","","","","","","","","","","","","","",""],"d":["","Describes skeletal bones and their relationships.","This module describes the mathematical conventions we …","Contains trivial “newtype” wrappers","Provides convenient re-exports of common types","The skeleton, and its representation as a graph data …","","","","Describes the various types of bones in the skeleton.","Provides a map of <code>BoneKind</code> -&gt; <code>T</code>. Every possible <code>BoneKind</code> …","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Describes the various types of bones in the skeleton.","","","","","","","","","","","","","","","","","","","","","","","Returns the initial calibration pose of the bone. Rotating …","Returns the initial calibration pose of the bone, as a …","Returns the children of any particular bone.","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","The bone with the largest integer value","The bone with the smallest integer value","Returns the number of unique kinds of bones. This is …","The parent of a bone.","The root bone of the skeletal graph/tree.","","","","","","","","","","","","Provides a map of <code>BoneKind</code> -&gt; <code>T</code>. Every possible <code>BoneKind</code> …","","","","","Gets an iterator over the (key, value) pairs of the <code>BoneMap</code>…","Gets a mutable iterator over the <code>(key, value)</code> pairs of the …","Applies a function to each element of the <code>BoneMap</code>, mapping …","","","A vector in the “forward” or <code>-Z</code> direction","Creates a <code>UnitQuat</code> that corresponds to the local frame of …","A vector in the “right” or <code>+X</code> direction","A vector in the “up” or <code>+Y</code> direction","","","A newtype on <code>T</code> that indicates that it is a global …","A newtype on <code>T</code> that indicates that it is a local transform.","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","Implements <code>From&lt;T&gt; for $ident&lt;T&gt;</code>","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Private helper trait to limit the types that can go in …","","","Describes the various types of bones in the skeleton.","","","","","","","","","","","","","","","","","","","The <code>Skeleton</code> provides a way of reading, writing, and …","Used to initialize the <code>Skeleton</code> with its initial parameters","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Creates a new <code>Skeleton</code> from <code>SkeletonConfig</code>. Initially, the …","","","","","","","","","","","","Represents a regular bone in the skeleton.","<code>Edge</code>s represent the connections between the <code>Node</code>s of the …","The different kinds of edges.","Represents a tracker that is providing pose information as …","Represents a computed/synthetic tracker that will act as …","","","","","Local rotation of the edge with respect to the parent edge …","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Input rotation in global space. If it is unconstrained, it …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Length of the edge. May be set by the user, or may be …","","","","The output rotation of the edge. Solving the skeleton …","","","","","","","","","","","","","","<code>Node</code>s represent the connections between <code>Edge</code>s in the …","","","","","Returns the argument unchanged.","","Input position in global space. If it is unconstrained, it …","","","Calls <code>U::from(self)</code>.","","","The output position of the <code>Node</code>. Solving the skeleton …","","","","","","",""],"i":[0,0,0,0,0,0,1,2,2,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,0,0,0,0,0,1,1,1,0,1,0,0,0,0,3,4,0,0,3,4,3,4,3,4,3,4,3,4,3,4,3,3,3,4,4,4,3,4,0,3,4,3,4,3,4,0,3,4,3,4,3,4,3,4,3,4,0,2,2,0,0,2,2,2,2,2,2,2,0,2,2,0,0,2,2,2,2,2,0,0,5,6,5,6,5,6,0,5,6,5,6,6,6,5,6,5,6,5,6,0,5,6,5,6,5,6,5,6,5,6,7,0,0,7,7,8,7,8,7,8,8,7,7,7,7,7,8,7,7,8,7,7,8,8,8,7,8,7,8,8,8,8,8,7,8,8,8,7,8,7,8,7,8,7,8,7,8,7,9,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["bonemap",3]],[[["",0],["",0]]],[[],["bonemap",3]],[[["",0],["bonemap",3]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[],["bonemap",3]],[[["",0]]],[[["",0],["bonekind",4]]],[[["",0],["bonekind",4]]],[[]],[[]],[[["",0]],["bool",0]],[[["",0],["bonemap",3]],["bool",0]],[[["",0]]],[[["",0]],["option",4]],[[["",0]]],[[["hashmap",3,[["bonekind",4]]]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[],["global",3,[["unitquat",6]]]],[[],["local",3,[["unitquat",6]]]],[[["",0]]],[[["",0]],["bonekind",4]],[[["",0],["",0]]],[[["",0],["bonekind",4]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[["i64",0]],["option",4]],[[["",0]]],[[["u64",0]],["option",4]],[[["",0],["",0]]],[[]],[[["",0]],["bool",0]],[[],["map",3,[["rangeinclusive",3,[["u8",0]]]]]],[[],["bonekind",4]],[[],["bonekind",4]],[[],["usize",0]],[[["",0]],["option",4,[["bonekind",4]]]],[[]],[[["",0]],["option",4,[["i64",0]]]],[[["",0]]],[[["",0]],["option",4]],[[["",0]]],[[["",0]],["option",4,[["u64",0]]]],[[["u8",0]],["result",4]],[[],["result",4]],[[["usize",0]],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,[[["",0]],["iter",6]],[[["",0]],["itermut",6]],[[],["bonemap",3]],[[]],[[]],[[],["unit",3,[["vector3",6,[["f32",0]]]]]],[[["vector3",6],["vector3",6]],["unitquat",6]],[[],["unit",3,[["vector3",6,[["f32",0]]]]]],[[],["unit",3,[["vector3",6,[["f32",0]]]]]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[],["global",3]],[[],["local",3]],[[["",0],["global",3]],["bool",0]],[[["",0],["local",3]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[["never",0]]],[[]],[[]],[[]],[[["never",0]]],[[["",0]]],[[["",0]]],null,[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0],["global",3]],["bool",0]],[[["",0],["local",3]],["bool",0]],null,[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[]],[[]],[[["",0]]],[[["",0]]],null,[[["",0],["bonekind",4]]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["bonemap",3,[["f32",0]]]]],[[["skeletonconfig",3]]],null,[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[["",0]],["local",3]],[[["",0]],["edgekind",4]],[[["",0],["",0]]],[[["",0],["edgekind",4]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[["bonekind",4]],["edgekind",4]],[[]],[[["",0]]],[[["",0]]],[[["",0],["",0]]],null,[[["",0]],["option",4,[["global",3]]]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["edgekind",4]],null,[[["",0]],["f32",0]],null,[[["",0]],["f32",0]],[[["",0],["edgekind",4]],["bool",0]],[[["f32",0]]],null,[[["",0]],["global",3]],[[["",0]]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[],["node",3]],[[["",0],["formatter",3]],["result",6]],[[]],[[["",0]]],null,[[["",0]],["option",4,[["global",3]]]],[[["",0]],["option",4,[["global",3]]]],[[]],[[["",0]],["bool",0]],[[]],null,[[["",0]],["global",3]],[[["",0]],["global",3]],[[["",0]],["option",4]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]]],"p":[[3,"BoneMap"],[4,"BoneKind"],[3,"Global"],[3,"Local"],[3,"SkeletonConfig"],[3,"Skeleton"],[4,"EdgeKind"],[3,"Edge"],[13,"Bone"],[3,"Node"]]},\
"slimevr_overlay":{"doc":"","t":[17,13,3,4,12,12,11,11,0,11,11,0,11,11,11,11,12,11,11,5,0,5,5,12,11,11,11,11,11,11,14,11,3,2,2,2,6,11,11,0,11,11,11,11,11,11,11,12,0,11,11,11,11,11,11,12,2,4,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,3,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,13,13,13,4,6,3,6,13,13,4,6,6,8,6,13,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,18,18,18,18,18,18,18,18,18,18,18,18,3,18,18,18,18,12,12,11,11,11,11,14,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,2,2,2,2,0,0,0,0,3,6,11,11,11,12,11,11,11,11,11,12,12,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,13,13,4,13,13,13,13,13,13,13,18,18,18,13,18,13,13,13,13,13,13,13,17,17,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,6,6,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,17,6,3,3,3,12,12,12,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["CONNECT_STR","CtrlC","RGBA","ShutdownReason","a","b","borrow","borrow_mut","client","clone","clone_into","color","eq","fmt","from","from_subset","g","into","is_in_subset","main","model","networking","overlay","r","to_owned","to_subset","to_subset_unchecked","try_from","try_into","type_id","unwrap_or_continue","vzip","Client","Data","DecodeError","FeedUpdate","Wss","borrow","borrow_mut","data","from","from_subset","into","is_in_subset","join","new","run","socket_task","state_machine","to_subset","to_subset_unchecked","try_from","try_into","type_id","vzip","0","Data","DecodeError","FbVerification","FeedUpdate","borrow","borrow","borrow_mut","borrow_mut","fmt","fmt","fmt","from","from","from","from_subset","from_subset","into","into","is_in_subset","is_in_subset","ouroboros_impl_data","source","to_string","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","0","BorrowedFields","BorrowedMutFields","Data","DataAsyncBuilder","DataAsyncSendBuilder","DataAsyncSendTryBuilder","DataAsyncTryBuilder","DataBuilder","DataTryBuilder","Heads","as_slice","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_data","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_table","build","build","build","check_if_okay_according_to_checkers","data","data","data","data","data","data","data","data","data","fmt","from","from","from","from","from","from","from","from","from","from","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_vec","from_vec_unchecked","into","into","into","into","into","into","into","into","into","into","into_heads","into_vec","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","new","new_async","new_async_send","table","table","table","table_builder","table_builder","table_builder","table_builder","table_builder","table_builder","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_build","try_build","try_build","try_build_or_recover","try_build_or_recover","try_build_or_recover","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_new","try_new_async","try_new_async_send","try_new_or_recover","try_new_or_recover_async","try_new_or_recover_async_send","type_asserts","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","with","with_data","with_mut","with_table","with_table_mut","Active","ClientStateMachine","Common","Connected","CriticalWs","DecodeError","Deserialize","DeserializeError","DeserializeFn","Disconnected","M","None","PayloadType","RecvError","RecvResult","SlimeSink","SlimeSinkT","SlimeStream","Ws","_sink","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","common","connect","connect_to","fbb","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","into","into","into","into","into","into","into","into_state","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","new","recv","request_feed","sink","source","state","stream","stream","to_string","to_string","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","0","0","0","1","0","0","0","1","1","AQUA","BLACK","BLUE","FUCHSIA","GRAY","GREEN","LIME","MAROON","NAVY","OLIVE","PURPLE","RED","RGBA","SILVER","TEAL","WHITE","YELLOW","a","b","borrow","borrow_mut","clone","clone_into","def_color","eq","fmt","from","from_subset","g","into","is_in_subset","ne","new","r","to_owned","to_subset","to_subset_unchecked","try_from","try_into","type_id","vzip","Bone","BoneKind","BoneMap","Isometry","bone","bone_kind","bone_map","skeleton","Bone","Isometry","borrow","borrow_mut","circumference","color","fmt","from","from_subset","into","is_in_subset","is_visible","iso","length","new","overlays","radius","set_isometry","set_length","set_radius","set_visibility","to_subset","to_subset_unchecked","try_from","try_into","type_id","update_render","vzip","AnkleL","AnkleR","BoneKind","Chest","FootL","FootR","ForearmL","ForearmR","Head","Hip","MAX","MIN","NUM_TYPES","Neck","ROOT","ThighL","ThighR","UpperArmL","UpperArmR","Waist","WristL","WristR","_IMPL_NUM_FromPrimitive_FOR_BoneKind","_IMPL_NUM_ToPrimitive_FOR_BoneKind","borrow","borrow_mut","children","clone","clone_into","eq","fmt","from","from_i64","from_subset","from_u64","hash","into","is_in_subset","iter","max","min","num_types","parent","root","to_i64","to_owned","to_subset","to_subset_unchecked","to_u64","try_from","try_from","try_from","try_from","try_into","type_id","vzip","0","BoneMap","IntoIter","Iter","IterMut","MapIdxFnType","borrow","borrow_mut","clone","clone_into","default","fmt","from","from_subset","index","index_mut","into","into_iter","is_in_subset","iter","iter_mut","map_idx","new","to_owned","to_subset","to_subset_unchecked","try_from","try_from","try_from_iter","try_into","type_id","vzip","BONE_RADIUS","BoneArena","DEFAULT_COLORS","Skeleton","SkeletonBuilder","__private_field","bone_lengths","bone_radius","bones","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","colors","default","deref","from","from","from","from_subset","from_subset","from_subset","into","into","into","is_in_subset","is_in_subset","is_in_subset","key","new","set_isometry","set_length","set_visibility","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update_render","vzip","vzip","vzip"],"q":["slimevr_overlay","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","slimevr_overlay::client","","","","","","","","","","","","","","","","","","","","","","","slimevr_overlay::client::data","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","slimevr_overlay::client::data::DecodeError","slimevr_overlay::client::data::ouroboros_impl_dataslimevr_overlay::client::state_machine","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","slimevr_overlay::client::state_machine::DeserializeError","","","","slimevr_overlay::client::state_machine::RecvError","","","","","slimevr_overlay::color","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","slimevr_overlay::model","","","","","","","","slimevr_overlay::model::bone","","","","","","","","","","","","","","","","","","","","","","","","","","","","slimevr_overlay::model::bone_kind","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","slimevr_overlay::model::bone_map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","slimevr_overlay::model::skeleton","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Encapsulates implementation details for a self-referencing …","","","","","","","","","","","","","","","","A struct for holding immutable references to all tail and …","A struct for holding mutable references to all tail fields …","The self-referencing struct.","A more verbose but stable way to construct …","A more verbose but stable way to construct …","A more verbose but stable way to construct …","A more verbose but stable way to construct …","A more verbose but stable way to construct …","A more verbose but stable way to construct …","A struct which contains only the head fields of <code>Data</code>.","","","","","","","","","","","","Provides limited immutable access to <code>data</code>. This method was …","","","","","","","","","","","Provides an immutable reference to <code>table</code>. This method was …","Calls <code>Data::new()</code> using the provided values. This is …","Calls <code>Data::new()</code> using the provided values. This is …","Calls <code>Data::new()</code> using the provided values. This is …","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","This function drops all internally referencing fields and …","","","","","","","","","","","","Constructs a new instance of this self-referential struct. …","Constructs a new instance of this self-referential struct. …","Constructs a new instance of this self-referential struct. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>Data::try_new()</code> using the provided values. This is …","Calls <code>Data::try_new()</code> using the provided values. This is …","Calls <code>Data::try_new()</code> using the provided values. This is …","Calls <code>Data::try_new_or_recover()</code> using the provided …","Calls <code>Data::try_new_or_recover()</code> using the provided …","Calls <code>Data::try_new_or_recover()</code> using the provided …","","","","","","","","","","","","","","","","","","","","","(See also <code>DataTryBuilder::try_build()</code>.) Like <code>new</code>, but …","(See also <code>DataAsyncTryBuilder::try_build()</code>.) Like <code>new</code>, but …","(See also <code>DataAsyncSendTryBuilder::try_build()</code>.) Like <code>new</code>, …","(See also <code>DataTryBuilder::try_build_or_recover()</code>.) Like …","(See also <code>DataAsyncTryBuilder::try_build_or_recover()</code>.) …","(See also <code>DataAsyncSendTryBuilder::try_build_or_recover()</code>…","","","","","","","","","","","","","","","","","","","","","","This method provides immutable references to all tail and …","Provides limited immutable access to <code>data</code>. This method was …","This method provides mutable references to all tail fields.","Provides an immutable reference to <code>table</code>. This method was …","Provides a mutable reference to <code>table</code>. This method was …","Datafeed is active","","Data common to all states goes here","Client is connected over websocket","","","","","","Client is fully disconnected from the server.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Helper function to transition to next state while …","","","","","","","","Creates a new <code>NetworkStateMachine</code>. This starts in the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","The <code>BoneKind</code> with the largest integer value","The <code>BoneKind</code> with the smallest integer value","Returns the number of different types of bones.","","The root bone type.","","","","","","","","","","","","","","Provides a map of <code>BoneKind</code> -&gt; <code>T</code>.","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Builder for the <code>Skeleton</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,0,0,2,2,1,1,0,1,1,0,1,1,1,1,2,1,1,0,0,0,0,2,1,1,1,1,1,1,0,1,0,0,0,0,0,3,3,0,3,3,3,3,3,3,3,3,0,3,3,3,3,3,3,4,0,0,5,0,5,4,5,4,5,5,4,5,5,4,5,4,5,4,5,4,0,5,5,5,4,5,4,5,4,5,4,5,4,5,4,6,0,0,0,0,0,0,0,0,0,0,7,7,8,9,10,11,12,13,14,15,16,7,7,8,9,10,11,12,13,14,15,16,7,8,9,10,0,8,9,10,11,12,13,14,15,16,7,7,8,9,10,11,12,13,14,15,16,7,8,9,10,11,12,13,14,15,16,7,7,7,8,9,10,11,12,13,14,15,16,7,7,7,8,9,10,11,12,13,14,15,16,7,7,7,7,14,15,8,9,10,11,12,13,7,8,9,10,11,12,13,14,15,16,7,8,9,10,11,12,13,14,15,16,11,12,13,11,12,13,7,8,9,10,11,12,13,14,15,16,7,8,9,10,11,12,13,14,15,16,7,7,7,7,7,7,0,7,8,9,10,11,12,13,14,15,16,7,8,9,10,11,12,13,14,15,16,7,7,7,7,7,0,0,0,0,17,18,17,0,0,0,0,17,18,0,0,0,0,0,18,19,20,21,18,22,23,19,17,20,21,18,22,23,19,17,21,21,20,23,20,21,18,18,22,23,19,17,17,20,21,18,18,22,23,19,17,20,21,18,22,23,19,17,20,21,18,22,23,19,17,21,20,21,18,22,23,19,17,21,21,21,23,18,21,23,19,18,17,20,21,18,22,23,19,17,20,21,18,22,23,19,17,20,21,18,22,23,19,17,20,21,18,22,23,19,17,20,21,18,22,23,19,17,20,21,18,22,23,19,17,24,25,26,24,27,28,29,27,28,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,31,31,0,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,0,0,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,32,0,0,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,0,32,32,32,32,32,32,32,32,32,32,0,0,0,0,0,33,34,34,35,34,35,33,34,35,33,34,34,34,33,34,35,33,34,35,33,34,35,33,34,35,33,34,35,35,35,35,34,35,33,34,35,33,34,35,33,34,35,33,34,35,33,35,34,35,33],"f":[null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],null,[[["",0]],["shutdownreason",4]],[[["",0],["",0]]],null,[[["",0],["shutdownreason",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[["",0]]],null,[[]],[[["",0]],["bool",0]],[[],["result",6]],null,[[["subsystemhandle",3]]],[[["receiver",3,[["option",4,[["feedupdate",3]]]]],["subsystemhandle",3]]],null,[[["",0]]],[[["",0]],["option",4]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[]],null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],null,[[]],[[["",0]]],[[]],[[["",0]],["bool",0]],[[]],[[["string",3],["subsystemhandle",3]],["result",6]],[[["string",3],["sender",3,[["option",4,[["feedupdate",3]]]]]]],null,null,[[["",0]],["option",4]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["invalidflatbuffer",4]]],[[]],[[]],[[["",0]]],[[["",0]]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],null,[[["",0]],["option",4,[["error",8]]]],[[["",0]],["string",3]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,[[["",0]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["vec",3]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["messagebundle",3]],[[],["data",3]],[[]],[[]],[[["vec",3,[["u8",0]]]]],null,null,null,null,null,null,null,null,null,[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["vec",3,[["u8",0]]]],["result",4]],[[["vec",3,[["u8",0]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["heads",3]],[[],["vec",3,[["u8",0]]]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["vec",3,[["u8",0]]]],["data",3]],[[["vec",3,[["u8",0]]]]],[[["vec",3,[["u8",0]]]]],[[["",0]],["messagebundle",3]],null,null,null,null,null,null,null,null,[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4,[["data",3]]]],[[]],[[]],[[],["result",4,[["data",3]]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["vec",3,[["u8",0]]]],["result",4,[["data",3]]]],[[["vec",3,[["u8",0]]]]],[[["vec",3,[["u8",0]]]]],[[["vec",3,[["u8",0]]]],["result",4,[["data",3]]]],[[["vec",3,[["u8",0]]]]],[[["vec",3,[["u8",0]]]]],[[]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[]],null,null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["wserror",4]]],[[]],[[]],[[]],[[]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["clientstatemachine",3]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["string",3]]],[[]],[[]],null,[[["",0]],["option",4,[["error",8]]]],null,null,null,[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["rgba",3]],[[["",0],["",0]]],null,[[["",0],["rgba",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[["",0]]],null,[[]],[[["",0]],["bool",0]],[[["",0],["rgba",3]],["bool",0]],[[["u8",0],["u8",0],["u8",0],["u8",0]]],null,[[["",0]]],[[["",0]],["option",4]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["f32",0]],null,[[["",0],["formatter",3]],["result",6]],[[]],[[["",0]]],[[]],[[["",0]],["bool",0]],null,null,null,[[["overlaymanager",3],["rgba",3],["isometry3",6,[["f32",0]]],["string",3],["f32",0],["f32",0]],["result",6]],null,null,[[["",0],["isometry3",6,[["f32",0]]]]],[[["",0],["f32",0]]],[[["",0],["f32",0]]],[[["",0],["bool",0]]],[[["",0]],["option",4]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0],["overlaymanager",3]],["result",6]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[["",0]],["bonekind",4]],[[["",0],["",0]]],[[["",0],["bonekind",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[["i64",0]],["option",4]],[[["",0]]],[[["u64",0]],["option",4]],[[["",0],["",0]]],[[]],[[["",0]],["bool",0]],[[],["map",3,[["rangeinclusive",3,[["u8",0]]]]]],[[],["bonekind",4]],[[],["bonekind",4]],[[],["usize",0]],[[["",0]],["option",4,[["bonekind",4]]]],[[]],[[["",0]],["option",4,[["i64",0]]]],[[["",0]]],[[["",0]],["option",4]],[[["",0]]],[[["",0]],["option",4,[["u64",0]]]],[[],["result",4]],[[["bodypart",3]],["result",4]],[[["usize",0]],["result",4]],[[["u8",0]],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["bonemap",3]],[[["",0],["",0]]],[[],["bonemap",3]],[[["",0],["formatter",3]],["result",6]],[[]],[[["",0]]],[[["",0],["bonekind",4]]],[[["",0],["bonekind",4]]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["map",3,[["enumerate",3,[["iter",3]]]]]],[[["",0]],["map",3,[["enumerate",3,[["itermut",3]]]]]],[[]],[[]],[[["",0]]],[[["",0]],["option",4]],[[["",0]]],[[],["result",4]],[[["hashmap",3,[["bonekind",4]]]],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["overlaymanager",3]],["result",6,[["skeleton",3]]]],null,[[]],[[["",0]],["bonemap",3]],[[]],[[]],[[]],[[["",0]]],[[["",0]]],[[["",0]]],[[]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],null,[[["bonemap",3,[["bone",3]]]]],[[["",0],["bonekind",4],["isometry3",6,[["f32",0]]]]],[[["",0],["bonekind",4],["f32",0]]],[[["",0],["bonekind",4],["bool",0]]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["bonekind",4],["overlaymanager",3]],["result",6]],[[]],[[]],[[]]],"p":[[4,"ShutdownReason"],[3,"RGBA"],[3,"Client"],[3,"FeedUpdate"],[4,"DecodeError"],[13,"FbVerification"],[3,"Data"],[3,"DataBuilder"],[3,"DataAsyncBuilder"],[3,"DataAsyncSendBuilder"],[3,"DataTryBuilder"],[3,"DataAsyncTryBuilder"],[3,"DataAsyncSendTryBuilder"],[3,"BorrowedFields"],[3,"BorrowedMutFields"],[3,"Heads"],[4,"RecvError"],[4,"DeserializeError"],[3,"Active"],[3,"Common"],[3,"ClientStateMachine"],[3,"Disconnected"],[3,"Connected"],[13,"DecodeError"],[13,"PayloadType"],[13,"Ws"],[13,"CriticalWs"],[13,"Deserialize"],[13,"None"],[3,"Bone"],[4,"BoneKind"],[3,"BoneMap"],[3,"DEFAULT_COLORS"],[3,"SkeletonBuilder"],[3,"Skeleton"]]},\
"tokio_shutdown":{"doc":"","t":[3,13,3,13,4,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12],"n":["Broadcaster","BroadcasterClosed","Listener","Reason","ShutdownReason","acknowledge","b_receiver","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","broadcaster","clone","clone_into","default","from","from","from","into","into","into","into_reason","mpsc_copy","mpsc_sender","new","new_listener","num_listeners","recv","shutdown_reason","shutdown_watcher","signal_shutdown","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","try_recv","type_id","type_id","type_id","0"],"q":["tokio_shutdown","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tokio_shutdown::ShutdownReason"],"d":["Allows signalling a shutdown, with a particular reason …","","Generics","","","Block until an acknowledgement of the shutdown is sent. It …","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Get the underlying shutdown reason, if present. Does not …","","","","Creates a new <code>Listener</code> to the <code>Broadcaster</code>.","","Doesn’t return until a shutdown occurs.","","","Signals shutdown, with an optional reason. If no reason is …","","","","","","","","Returns <code>None</code> if no shutdown has occurred, otherwise …","","","",""],"i":[0,1,0,1,0,2,2,3,2,1,3,2,1,3,1,1,3,3,2,1,3,2,1,2,3,2,3,3,3,2,2,3,3,1,3,2,1,3,2,1,2,3,2,1,4],"f":[null,null,null,null,null,[[],["option",4,[["shutdownreason",4]]]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[["",0]],["shutdownreason",4]],[[["",0],["",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4,[["shutdownreason",4]]]],null,null,[[]],[[["",0]],["listener",3]],[[["",0]],["usize",0]],[[["",0]]],null,null,[[["option",4]],["unboundedreceiver",3]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["option",4,[["shutdownreason",4]]]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null],"p":[[4,"ShutdownReason"],[3,"Listener"],[3,"Broadcaster"],[13,"Reason"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};